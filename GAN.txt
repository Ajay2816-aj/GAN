import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np
import os

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'

def build_generator(latent_dim):
    model = models.Sequential([
        layers.Dense(128, input_dim=latent_dim, activation='relu'),
        layers.Dense(784, activation='sigmoid'),
        layers.Reshape((28, 28, 1))
    ])
    return model

def build_discriminator(img_shape):
    model = models.Sequential([
        layers.Flatten(input_shape=img_shape),
        layers.Dense(128, activation='relu'),
        layers.Dense(1, activation='sigmoid')
    ])
    return model

def build_gan(generator, discriminator):
    discriminator.trainable = False
    model = models.Sequential([generator, discriminator])
    return model

img_shape = (28, 28, 1)
latent_dim = 100

discriminator = build_discriminator(img_shape)
discriminator.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])

generator = build_generator(latent_dim)

gan = build_gan(generator, discriminator)
gan.compile(loss='binary_crossentropy', optimizer='adam')

(train_images, _), (_, _) = tf.keras.datasets.mnist.load_data()
train_images = np.expand_dims(train_images / 255.0, axis=-1)

batch_size, epochs = 64, 1000

for epoch in range(epochs):
    idx = np.random.randint(0, train_images.shape[0], batch_size)
    real_imgs, labels_real = train_images[idx], np.ones((batch_size, 1))
    noise = np.random.normal(0, 1, (batch_size, latent_dim))
    generated_imgs, labels_fake = generator.predict(noise), np.zeros((batch_size, 1))

    d_loss_real = discriminator.train_on_batch(real_imgs, labels_real)
    d_loss_fake = discriminator.train_on_batch(generated_imgs, labels_fake)
    d_loss = 0.5 * np.add(d_loss_real, d_loss_fake)

    g_loss = gan.train_on_batch(np.random.normal(0, 1, (batch_size, latent_dim)), np.ones((batch_size, 1)))

    if epoch % 100 == 0:
        print(f"Epoch {epoch}, D Loss: {d_loss[0]}, G Loss: {g_loss}")
        generated_images = generator.predict(noise)
        output_dir = 'images/'
        os.makedirs(output_dir, exist_ok=True)
        filename = os.path.join(output_dir, f"gan_generated_image_epoch_{epoch}.png")
        plt.figure(figsize=(10, 10))
        for i in range(25):
            plt.subplot(5, 5, i + 1)
            plt.imshow(generated_images[i, :, :, 0], cmap='gray')
            plt.axis('off')
        plt.savefig(filename)
        plt.close()
        print(f"Saved image: {filename}")
